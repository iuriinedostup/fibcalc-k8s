name: Multi container k8s application
on:
  push:
    branches:
      - master

env:
  DOCKER_REPO: iuriinedostup
  SERVER_IMAGE_NAME: fibcalc-k8s-server
  CLIENT_IMAGE_NAME: fibcalc-k8s-client
  WORKER_IMAGE_NAME: fibcalc-k8s-worker

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build client
        uses: docker/build-push-action@v2
        with:
          context: ./client
          file: ./client/Dockerfile.dev
          load: true
          tags: iuriinedostup/multi-client-ci

      - name: test client app
        run: docker run -e CI=true iuriinedostup/multi-client-ci npm run test

      - name: Build server
        uses: docker/build-push-action@v2
        with:
          context: ./server
          file: ./server/Dockerfile.dev
          load: true
          tags: iuriinedostup/multi-server-ci

      - name: test server app
        run: docker run -e CI=true iuriinedostup/multi-server-ci npm run test

      - name: Build worker
        uses: docker/build-push-action@v2
        with:
          context: ./worker
          file: ./worker/Dockerfile.dev
          load: true
          tags: iuriinedostup/multi-worker-ci

      - name: test worker app
        run: docker run -e CI=true iuriinedostup/multi-worker-ci npm run test

  build:
    runs-on: ubuntu-latest
    needs: test
    if: false  # disabling step for now
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare build
        id: prep
        run: |
          SHA=$(git rev-parse --short HEAD)
          echo ::set-output name=sha::${SHA}
          echo ::set-output name=client_image::${{  env.DOCKER_REPO  }}/${{  env.CLIENT_IMAGE_NAME  }}:${SHA}
          echo ::set-output name=client_image_latest::${{  env.DOCKER_REPO  }}/${{  env.CLIENT_IMAGE_NAME  }}
          echo ::set-output name=worker_image::${{  env.DOCKER_REPO  }}/${{  env.WORKER_IMAGE_NAME  }}:${SHA}
          echo ::set-output name=worker_image_latest::${{  env.DOCKER_REPO  }}/${{  env.WORKER_IMAGE_NAME  }}
          echo ::set-output name=server_image::${{  env.DOCKER_REPO  }}/${{  env.SERVER_IMAGE_NAME  }}:${SHA}
          echo ::set-output name=server_image_latest::${{  env.DOCKER_REPO  }}/${{  env.SERVER_IMAGE_NAME  }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build client
        uses: docker/build-push-action@v2
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{steps.prep.outputs.client_image }}
            ${{steps.prep.outputs.client_image_latest }}

      - name: Build worker
        uses: docker/build-push-action@v2
        with:
          context: ./worker
          file: ./worker/Dockerfile
          push: true
          tags: |
            ${{steps.prep.outputs.worker_image }}
            ${{steps.prep.outputs.worker_image_latest }}

      - name: Build server
        uses: docker/build-push-action@v2
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{  steps.prep.outputs.server_image  }}
            ${{  steps.prep.outputs.server_image_latest  }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: false  # this is demo project: skipping deployment as there is no infra anymore
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare build
        id: prep
        run: |
          SHA=$(git rev-parse --short HEAD)
          echo ::set-output name=sha::${SHA}
          echo ::set-output name=client_image::${{  env.DOCKER_REPO  }}/${{  env.CLIENT_IMAGE_NAME  }}:${SHA}
          echo ::set-output name=worker_image::${{  env.DOCKER_REPO  }}/${{  env.WORKER_IMAGE_NAME  }}:${SHA}
          echo ::set-output name=server_image::${{  env.DOCKER_REPO  }}/${{  env.SERVER_IMAGE_NAME  }}:${SHA}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.DEPLOY_ROLE_ARN }}
          role-duration-seconds: 900 # the ttl of the session, in seconds.
          aws-region: ${{ secrets.DEPLOY_REGION }} # use your region here.

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: deploy to EKS
        env:
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME}}
          CLUSTER_REGION: ${{ secrets.DEPLOY_REGION}}
          SERVER_IMAGE: ${{  steps.prep.outputs.server_image  }}
          WORKER_IMAGE: ${{  steps.prep.outputs.worker_image  }}
          CLIENT_IMAGE: ${{  steps.prep.outputs.client_image  }}
        run: ./devops/bin/deploy.sh
